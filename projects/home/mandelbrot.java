package home;

import java.util.Scanner;
/*This program uses the recursive formula [Ans^2+c=Ans] to find if the Ans converges to a fixed number or not.
 * For most cases, c is greater than 0 and smaller than 0.25, both inclusive.
 * The value x should be preferably start at 0 but other values are possible.
 * The mandelbrot set is generated by calculating how many steps it requires for each value of c to converge to a fixed value.
 * for example for c=0.25, the recursive formula converges to 0.5 after 150664061 steps, while 0.24 only requires 151 steps to converge to 0.4.
 * More information -https://en.wikipedia.org/wiki/Mandelbrot_set
 */

class mandelbrot {
    double x;// the value which changes by recursion.
    double c;

    mandelbrot(double x, double c) {
        this.x = x;
        this.c = c;
    }

    double solve() {
        if (c < 0)
            return 0.5 + Math.sqrt(0.25 - c);
        return 0.5 - Math.sqrt(0.25 - c);
    }

    int converge() {
        int i;
        for (i = 0; true; i++) {// while x does not converge to a value.
            if (x == Math.pow(x, 2) + c)
                return i;
            x = Math.pow(x, 2) + c;
            // System.out.println(i+":"+x);//the line that shows steps, uncomment this line to show the number after each step.
            if (x > 1 && (Math.pow(x, 2) + c) > x)
                return -1;
        }
    }

    public static void main(String args[]) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the constant. 0<=(provided constant)<=0.25");
        double c = sc.nextDouble();
        System.out.println("Start from 0?(y/n). Enter y if you are using for the first time.");
        String b = sc.next();
        double x = 0;
        if (b.equalsIgnoreCase("n")) {
            System.out.println("enter x");
            x = sc.nextDouble();
        }
        mandelbrot ob = new mandelbrot(x, c);
        int steps = ob.converge();
        if (steps == -1)
            System.out.println("It does not converge");
        else {
            double soln = ob.solve();
            System.out.println("It converges after " + steps + " steps at x=" + soln + ".");
        }
        sc.close();
    }
}